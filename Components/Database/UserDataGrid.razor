@inherits BaseDbComponent<UserDataGrid, DB>

<DataGrid TItem=@User Items=@Users Sorting Filtering Paging Grouping PageSize=20 ResizableColumns ReorderableColumns>
	<Columns>
		<RadzenDataGridColumn TItem=@User Property=@nameof(User.UserName) Title=@Translate("Username")/>
		<RadzenDataGridColumn TItem=@User Property=@nameof(User.FullName) Title=@Translate("Full Name")/>
		<RadzenDataGridColumn TItem=@User Property=@nameof(User.PhoneNumber) Title=@Translate("Phone")/>
		<RadzenDataGridColumn TItem=@User Property=@nameof(User.RoleId) Title=@Translate("Role")>
			<Template Context="User">
				@(User.GetRole(DbContext!)?.Name ?? "");
			</Template>
		</RadzenDataGridColumn>
		@if(ShowEditColumn) {
			<RadzenDataGridColumn TItem=@User Title="" Sortable=false Filterable=false Groupable=false Resizable=false Reorderable=false>
				<Template Context="User">
					<OpenDialogButton OnDialogClose=@((x) => ReloadUser(User)) TDialog=@UserEditor ButtonText="Edit" DialogParameters=@(new() { { "User", User }, { "DbContext", DbContext } })/>
				</Template>
			</RadzenDataGridColumn>
		}
	</Columns>
</DataGrid>

@code {
	/// <summary>
	///		Whether to show the column which allows the user to edit the items in the grid.
	/// </summary>
	[Parameter]
	public bool ShowEditColumn { get; set; } = false;
	/// <summary>
	///     The users to show in the grid. Leave empty to load all users in the database.
	/// </summary>
	[Parameter]
	public IEnumerable<User> Users { get; set; } = null!;

	protected override void OnInitialized() {
		base.OnInitialized();
		Users ??= DbContext?.Users ?? Enumerable.Empty<User>();
	}

	protected async Task ReloadUser(User user) {
		await DbContext!.Entry(user).ReloadAsync();
	}

}
