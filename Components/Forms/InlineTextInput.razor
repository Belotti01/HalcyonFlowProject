@inherits InlineInput

<InlineInput Component=@Component Label=@Label Required=@Required Tooltip=@Tooltip NoLabel=@NoLabel>
		<ChildContent>
			<RadzenTextBox class="tw-w-full" @bind-Value=@Value Placeholder=@Placeholder Name=@Component Change=@OnValueChanged/>
		</ChildContent>
		<Validators>
			<RadzenLengthValidator Min=@MinLength Max=@MaxLength Component=@Component Text=@($"{Translate("Length must be between")} {MinLength}-{MaxLength}")/>
		</Validators>
</InlineInput>

@code {
	[Parameter]
	public int MinLength { get; set; } = 0;
	[Parameter]
	public int MaxLength { get; set; } = 255;
	[Parameter]
	public string Placeholder { get; set; } = string.Empty;
	/// <summary>
	/// Bind this parameter to link it to the value of the input field.
	/// </summary>
	[Parameter, Required]
	public string? Value { get; set; }
	[Parameter]
	public EventCallback<string?> Change { get; set; }
	/// <summary>
	/// Generated - do not set. Use <see cref="Change"/> instead.
	/// </summary>
	[Parameter]
	public EventCallback<string?> ValueChanged { get; set; }

	protected async Task OnValueChanged(string value) {
		if(ValueChanged.HasDelegate) {
			await ValueChanged.InvokeAsync(value);
		}
		if(Change.HasDelegate) {
			await Change.InvokeAsync(value);
		}
	}
}
