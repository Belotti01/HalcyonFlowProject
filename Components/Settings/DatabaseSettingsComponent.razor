@inherits BaseComponent<DatabaseSettingsComponent>

<RadzenCard>
<RadzenTemplateForm TItem="DatabaseSettings" Data=@Settings Submit=@TestConnection>
	<!--	HOST INPUT		-->
	<InlineInput Component="Host" Required Label="Host and Port">
		<div class="tw-grid tw-grid-cols-12">
			<RadzenTextBox class="tw-col-span-8" Name="Host" PlaceHolder="localhost" Change=@(x => ToggleSave(false)) @bind-Value="Settings.Host"/>
			<RadzenLabel Style="margin: auto;" Component="Port" Text=":"/>
			<RadzenNumeric class="tw-col-span-3" TValue="int" Min=0 Max=65535 Name="Port" Placeholder="3306" Change=@(x => ToggleSave(false)) @bind-Value="Settings.Port"/>
		</div>
	</InlineInput>

	<!--	DATABASE NAME INPUT		-->
	<InlineInput Component="Database name" Required Label="Database name">
		<RadzenTextBox class="tw-w-full" Name="Database name" @bind-Value="Settings.DatabaseName" Change=@(x => ToggleSave(false)) Placeholder="Database"/>
	</InlineInput>

	<!--	USERNAME INPUT		-->
	<InlineInput Component="Username" Required Label="Username">
		<RadzenTextBox class="tw-w-full" Name="Username" @bind-Value="Settings.Username" Change=@(x => ToggleSave(false)) Placeholder="Username" AutoComplete=false/>
	</InlineInput>

	<!--	PASSWORD INPUT		-->
	<InlineInput Component="Password" Required Label="Password">
		<RadzenPassword class="tw-w-full" Name="Password" @bind-Value="Settings.Password" Change=@(x => ToggleSave(false)) Placeholder="Password" AutoComplete=false/>
	</InlineInput>

	<!--	BUTTONS		-->
	<div class="tw-flex tw-mt-2">
		<!--	SAVE BUTTON		-->
		<RadzenButton class="tw-basis-1/6 tw-mr-1" ButtonStyle=@ButtonStyle.Secondary Text=@Translate("Save") @bind-Disabled="SaveDisabled" Click=@(x => Close(true))/>
		<!--	CANCEL BUTTON		-->
		<RadzenButton class="tw-basis-1/6 tw-ml-1" ButtonStyle=@ButtonStyle.Light Text=@Translate("Cancel") Click=@(x => Close(false))/>
		<!--	TEST CONNECTION BUTTON		-->
		<RadzenButton class="tw-grow tw-ml-2" ButtonStyle=@ButtonStyle.Secondary ButtonType="ButtonType.Submit" Text=@Translate("Attempt Connection")/>
	</div>
</RadzenTemplateForm>
</RadzenCard>

@code {
	[Parameter]
	public Action? OnSave { get; set; }

	protected DatabaseSettings Settings { get; set; } = new();
	protected bool SaveDisabled { get; set; }

	protected override void OnInitialized() {
		base.OnInitialized();
		TestConnection();
	}

	protected void ToggleSave(bool isEnabled) {
		SaveDisabled = !isEnabled;
	}

	protected void Close(bool save) {
		if(save) {
			Settings.Save();
			OnSave?.Invoke();
		}
		DialogService?.Close();
	}

	protected void TestConnection() {
		bool canConnect = DB.CanConnect(Settings, false);
		if(canConnect) {
			if(!DB.CanConnect(Settings, true)) {
				//TODO: check that the database is compatible with the environment; then
				// request the user whether to setup the database or not, if necessary.
			}
		}
		ToggleSave(canConnect);
	}
}
