@inherits BaseComponent<DatabaseSettingsComponent>

<RadzenCard>
<RadzenTemplateForm @ref=Form TItem="DatabaseSettings" Data=@Settings Submit=@TestConnection>
	<!--	HOST INPUT		-->
	<InlineInput Component="Host" Required Label="Host and Port">
		<div class="tw-grid tw-grid-cols-12">
			<RadzenTextBox class="tw-col-span-8" Name="Host" PlaceHolder="localhost" Change=@(x => ToggleSave(false)) @bind-Value="Settings.Host"/>
			<RadzenLabel Style="margin: auto;" Component="Port" Text=":"/>
			<RadzenNumeric class="tw-col-span-3" TValue="int" Min=0 Max=65535 Name="Port" Placeholder="3306" Change=@(x => ToggleSave(false)) @bind-Value="Settings.Port"/>
		</div>
	</InlineInput>

	<!--	DATABASE NAME INPUT		-->
	<InlineTextInput Component="Database name" Label="Database Name" Required @bind-Value="Settings.DatabaseName" Change=@(x => ToggleSave(false)) Placeholder="Database"/>

	<!--	USERNAME INPUT		-->
	<InlineTextInput Component="Username" Label="Username" Required @bind-Value="Settings.Username" Change=@(x => ToggleSave(false)) Placeholder="Username"/>

	<!--	PASSWORD INPUT		-->
	<InlineInput Component="Password" Label="Password" Required>
		<RadzenPassword class="tw-w-full" Name="Password" @bind-Value="Settings.Password" Change=@(x => ToggleSave(false)) Placeholder="Password" AutoComplete=false/>
	</InlineInput>

	<!--	BUTTONS		-->
	<div class="tw-flex tw-mt-2 tw-justify-center">
		<!--	TEST CONNECTION BUTTON		-->
		<RadzenButton class="tw-basis-4/5 tw-mr-1" Disabled=@(!IsInputValid || Busy) ButtonStyle=@ButtonStyle.Secondary ButtonType="ButtonType.Submit" Text=@Translate("Attempt Connection")/>
		<!--	DB CREATION BUTTON		-->
		<RadzenButton class="tw-basis-4/5 tw-ml-1" Disabled=@(!IsInputValid || Busy) ButtonStyle=@ButtonStyle.Secondary Text=@Translate(SaveDisabled ? "Create Database" : "Update Database") Click=@CreateDatabase/>
	</div>
	<div class="tw-flex tw-mt-2 tw-justify-center">
		<!--	SAVE BUTTON		-->
		<RadzenButton class="tw-basis-1/4 tw-mr-1" Disabled=@(SaveDisabled || Busy) ButtonStyle=@ButtonStyle.Secondary Text=@Translate("Save") Click=@(x => Close(true))/>
		<!--	CANCEL BUTTON		-->
		<RadzenButton class="tw-basis-1/4 tw-ml-1" ButtonStyle=@ButtonStyle.Light Text=@Translate("Cancel") Click=@(x => Close(false))/>
	</div>
</RadzenTemplateForm>
</RadzenCard>

@code {
	[Parameter]
	public Action? OnSave { get; set; }

	protected bool UpdateRequired { get; set; } = false;
	protected bool Busy { get; set; } = false;
	protected DatabaseSettings Settings { get; set; } = new();
	protected bool SaveDisabled { get; set; }
	protected bool IsInputValid => Form?.IsValid ?? false;
	protected RadzenTemplateForm<DatabaseSettings>? Form { get; set; }

	protected override void OnInitialized() {
		base.OnInitialized();
		TestConnection();
	}

	protected void ToggleSave(bool enable) {
		SaveDisabled = !IsInputValid || UpdateRequired || !enable;
		this.StateHasChanged();
	}

	protected void Close(bool save) {
		if(save) {
			Settings.Save();
			OnSave?.Invoke();
		}
		DialogService?.Close();
	}

	protected void TestConnection() {
		Busy = true;
		bool canConnect = DB.CanConnect(Settings, false);
		if(canConnect) {
			Logger?.LogInformation("Testing connection to: {0}", Settings.GetConnectionString());
			// Now check that the tables required are present.
			UpdateRequired = !DB.CanConnect(Settings, true);
		}
		Busy = false;
		ToggleSave(canConnect);
	}

	protected void CreateDatabase() {
		Busy = true;
		try {
			Settings.Save();
			using DB test = new(true);
			test.Database.Migrate();
			UpdateRequired = false;
		}catch(Exception ex) {
			Logger?.LogError($"Could not create database '{Settings.ToString()}: {ex.Message}'");
		}
		TestConnection();
		Busy = false;
	}
}
