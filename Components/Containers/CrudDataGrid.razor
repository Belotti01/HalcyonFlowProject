@inherits DataGrid<TItem>
@typeparam TItem where TItem : class, new()

<div class="tw-flex tw-my-2 tw-justify-between">
	@if(Grouping) {
		<InlineCheckBox @bind-Value=GroupingEnabled Text="Enable Grouping"/>
	}
	@CheckBoxes
</div>

<RadzenDataGrid AndOperatorText=@Translate("And") 
				OrOperatorText=@Translate("Or")
				ApplyFilterText=@Translate("Apply")
				DoesNotContainText=@Translate("Does not contain")
				ClearFilterText=@Translate("Clear")
				ContainsText=@Translate("Contains")
				EndsWithText=@Translate("Ends with")
				StartsWithText=@Translate("Starts with")
				FilterText=@Translate("Filter")
				EqualsText=@Translate("Equals")
				GreaterThanOrEqualsText=@Translate("Greater than or Equals")
				GreaterThanText=@Translate("Greater than")
				GroupPanelText=@Translate("Drag a column here to group items")
				LessThanOrEqualsText=@Translate("Less than or Equals")
				LessThanText=@Translate("Less than")
				NotEqualsText=@Translate("Not Equals")
				IsNullText=@Translate("Is Null")
				IsNotNullText=@Translate("Is not Null")
				@ref=@Grid 
				TItem=@TItem 
				Data=@Items 
				AllowColumnReorder=@ReorderableColumns 
				AllowColumnResize=@ResizableColumns 
				AllowGrouping=@(Grouping && GroupingEnabled) 
				AllowFiltering=@Filtering 
				AllowSorting=@Sorting 
				AllowPaging=@Paging 
				PageSize=@PageSize 
				EmptyText=@Translate("No records found.")
				RowDoubleClick=OnRowDoubleClick>
	<Columns>
		@Columns
	</Columns>
</RadzenDataGrid>

@if(CanModify) {
	<div class="tw-flex tw-my-2">
		@if(CanAdd) {
			<RadzenButton Style="margin-right: 4px;" Text=@Translate("Add new") Disabled=@Busy ButtonStyle=@ButtonStyle.Secondary Click=@OnAddClick/>
		}
		@if(CanDelete) {
			<RadzenButton Style="margin-right: 4px;" Text=@Translate("Delete") Disabled=@(Busy || EditingRow is null) ButtonStyle=@ButtonStyle.Secondary Click=@OnDeleteClick/>
		}
		@if(CanModify || CanAdd || CanDelete) {
			<RadzenButton Style="margin-right: 4px;" Text=@Translate("Save")  Disabled=@SavingDisabled ButtonStyle=@ButtonStyle.Secondary Click=@OnSaveClick/>
			<RadzenButton Text=@Translate("Undo Changes")  Disabled=@SavingDisabled ButtonStyle=@ButtonStyle.Secondary Click=@OnCancelClick/>
		}
	</div>
}

@code {
	[Parameter, Required, MemberNotNull]
	public DB DbContext { get; set; } = null!;
	[Parameter]
	public bool CanAdd { get; set; } = false;
	[Parameter]
	public bool CanModify { get; set; }
	[Parameter]
	public bool CanDelete { get; set; } = false;
	[Parameter]
	public DataGridEditMode EditMode { get; set; } = DataGridEditMode.Single;

	protected bool Busy { get; set; } = false;
	protected DbEditor<TItem> Editor { get; set; } = null!;
	public bool SavingDisabled => Busy || !Editor.HasPendingChanges;

	private TItem? _editingRow;
	protected TItem? EditingRow {
		get => _editingRow; 
		set {
			if(value is null) {
				if(EditingRow is not null) {
					Grid.CancelEditRow(EditingRow);
				}
			}else {
				Grid.EditRow(value).Wait();
				Editor.AddOrUpdate(value);
			}
			_editingRow = value;
		}
	}


	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		Editor = new(DbContext);
	}

	protected async Task OnAddClick(MouseEventArgs e) {
		if(Busy) return;
		Busy = true;
		TItem newItem = new();
		Editor.Add(newItem);
		await Grid.Reload();
		await Grid.EditRow(newItem);
		Busy = false;
	}

	protected async Task OnDeleteClick(MouseEventArgs e) {
		if(Busy || EditingRow is null) return;
		Busy = true;
		Editor.Remove(EditingRow);
		EditingRow = null;
		await Grid.Reload();
		Busy = false;
	}

	protected async Task OnCancelClick(MouseEventArgs e) {
		if(Busy) return;
		Busy = true;
		EditingRow = null;
		Editor.UndoChanges();
		await Grid.Reload();
		Busy = false;
	}

	protected async Task OnSaveClick(MouseEventArgs e) {
		if(Busy) return;
		Busy = true;
		EditingRow = null;

		Editor.SaveChanges();
		await Grid.Reload();
		Busy = false;
	}

	protected async Task OnRowDoubleClick(DataGridRowMouseEventArgs<TItem> e) {
		if(Busy) return;
		Busy = true;
		if(EditingRow is not null) {
			await Grid.UpdateRow(EditingRow);
		}
		EditingRow = e.Data;
		Busy = false;
	}
}
